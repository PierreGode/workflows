name: PR Summary and Issues Check
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  summarize_and_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run AI Analysis
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        run: |
          python - <<EOF
          import os
          import requests
          import json

          # Gather GitHub event details
          event_path = os.environ.get('GITHUB_EVENT_PATH')
          with open(event_path, 'r') as f:
              event = json.load(f)

          # Extract PR and repo details
          pr_number = event['pull_request']['number']
          repo_full_name = event['repository']['full_name']
          token = os.environ.get('GITHUB_TOKEN')
          openai_key = os.environ.get('OPENAI_API_KEY')

          # Get PR diff
          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3+json',
          }
          diff_url = event['pull_request']['url'] + "/files"
          pr_files = requests.get(diff_url, headers=headers).json()

          diff_text = ""
          file_patches = []  # Store patches with filenames for review comments
          for fdata in pr_files:
              filename = fdata['filename']
              patch = fdata.get('patch', '')
              if patch:
                  file_patches.append({"filename": filename, "patch": patch})
              diff_text += f"File: {filename}\\nPatch:\\n{patch}\\n\\n"

          # Call OpenAI for code issue checks
          issues_prompt = f"Review the following code changes for potential issues, such as syntax errors, missing brackets, common pitfalls, or bad practices. Provide specific comments tied to lines of code where possible:\\n\\n{diff_text}"
          ai_headers = {"Content-Type": "application/json", "Authorization": f"Bearer {openai_key}"}
          data_issues = {
              "model": "gpt-4o-mini",
              "messages": [{"role": "user", "content": issues_prompt}],
              "temperature": 0.7
          }
          issues_response = requests.post("https://api.openai.com/v1/chat/completions", headers=ai_headers, json=data_issues)
          issues_response.raise_for_status()
          issues = issues_response.json()['choices'][0]['message']['content'].strip()

          # Process issues and post review comments
          if "no issues found" not in issues.lower() and issues.strip():
              # Assuming AI response format includes line numbers and specific feedback
              review_comments = []
              for patch_data in file_patches:
                  filename = patch_data["filename"]
                  patch = patch_data["patch"]
                  lines = patch.split("\\n")
                  for i, line in enumerate(lines, start=1):
                      # Here, you could parse AI response to determine if the line has an issue
                      # Example logic: Look for AI's comment references to specific lines
                      if f"Line {i}" in issues:  # Simplistic check, adapt based on AI response
                          issue_comment = {
                              "path": filename,
                              "line": i,
                              "side": "RIGHT",  # Indicates it's on the new code side
                              "body": f"**AI Code Issue:** Found an issue at line {i}: {line.strip()}\\n\\n{issues}"
                          }
                          review_comments.append(issue_comment)

              # Submit a review with all comments
              if review_comments:
                  review_url = f"https://api.github.com/repos/{repo_full_name}/pulls/{pr_number}/reviews"
                  review_data = {
                      "body": "AI Code Issue Review: This PR contains actionable feedback based on the provided changes.",
                      "event": "COMMENT",
                      "comments": review_comments
                  }
                  review_response = requests.post(review_url, headers={'Authorization': f'token {token}', 'Accept': 'application/vnd.github.v3+json'}, json=review_data)
                  review_response.raise_for_status()
                  print("Review comments posted successfully.")
          else:
              print("No actionable code issues found.")
          EOF
