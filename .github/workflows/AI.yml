name: "PR Summary and Post-Merge Actions"

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, master]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr_summary:
    if: github.event_name == 'pull_request'
    name: "PR Summary by AI"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Read README.md
        id: read_readme
        run: |
          README_CONTENT=$(cat README.md)
          echo "README<<EOF" >> "$GITHUB_OUTPUT"
          echo "$README_CONTENT" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch Initial PR Comment
        id: fetch_pr_comment
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          TOKEN=${{ secrets.G_TOKEN }}
          URL="https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
          response=$(curl -s -H "Authorization: token $TOKEN" "$URL")
          initial_comment=$(echo "$response" | jq -r '.[0].body')
          echo "INITIAL_COMMENT<<EOF" >> "$GITHUB_OUTPUT"
          echo "$initial_comment" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: PR Summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          README_CONTENT: ${{ steps.read_readme.outputs.README }}
          INITIAL_COMMENT: ${{ steps.fetch_pr_comment.outputs.INITIAL_COMMENT }}
        run: |
          python - <<'EOF'
          import os
          import requests
          import json

          # Load the GitHub event
          event_path = os.environ.get('GITHUB_EVENT_PATH')
          with open(event_path, 'r') as f:
              event = json.load(f)

          pr_number = event.get('pull_request', {}).get('number')
          pr_title = event.get('pull_request', {}).get('title', '')
          repo_full_name = event.get('repository', {}).get('full_name')
          pr_url = event.get('pull_request', {}).get('html_url')
          token = os.environ.get('GITHUB_TOKEN')
          openai_key = os.environ.get('OPENAI_API_KEY')
          readme_content = os.environ.get('README_CONTENT')
          initial_comment = os.environ.get('INITIAL_COMMENT')

          # Get PR file diffs
          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github+json',
          }
          diff_url = event.get('pull_request', {}).get('url') + "/files"
          response = requests.get(diff_url, headers=headers)
          response.raise_for_status()
          pr_files = response.json()

          diff_text = ""
          for fdata in pr_files:
              filename = fdata.get('filename')
              patch = fdata.get('patch', '')
              if patch:
                  diff_text += f"File: {filename}\n{patch}\n\n"
          if not diff_text:
              diff_text = "No significant changes detected."

          # Construct the summary prompt
          # Note the extra instructions to provide a disruption level at the end.
          summary_prompt = (
              f"Analyze the following Pull Request Diff and summarize the changes:\n\n"
              f"**README Content:**\n{readme_content}\n\n"
              f"**Pull Request Diff:**\n{diff_text}\n\n"
              f"**Initial PR Comment:**\n{initial_comment}\n\n"
              f"Include:\n"
              f"- Key modified files\n"
              f"- Purpose (bug fixes, new features, optimizations)\n"
              f"- Functional changes with relevant code examples\n"
              f"- Potential impacts (breaking changes, performance concerns)\n\n"
              f"Finally, provide a single line labeled 'Disruption Level:' at the end, with one of the following:\n"
              f"- âœ… for minimal/non-application-affecting changes (e.g. comments, renaming variables)\n"
              f"- ðŸŸ  for minor changes that might affect some application behavior\n"
              f"- ðŸ”´ for major/possible breaking changes.\n"
          )

          # Call OpenAI API
          ai_headers = {
              "Content-Type": "application/json",
              "Authorization": f"Bearer {openai_key}"
          }
          openai_response = requests.post(
              "https://api.openai.com/v1/chat/completions",
              headers=ai_headers,
              json={
                  "model": "gpt-4o-mini",
                  "messages": [{"role": "user", "content": summary_prompt}],
                  "temperature": 0.7
              }
          )
          openai_response.raise_for_status()
          summary = openai_response.json()['choices'][0]['message']['content'].strip()

          # Post the summary as a PR comment
          comment_url = f"https://api.github.com/repos/{repo_full_name}/issues/{pr_number}/comments"
          comment_response = requests.post(
              comment_url,
              headers=headers,
              json={"body": f"**AI Pull Request Summary:**\n{summary}"}
          )
          comment_response.raise_for_status()

          print("PR Summary posted successfully.")
          EOF
